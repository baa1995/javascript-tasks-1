var hours = process.argv[2];
var minutes = process.argv[3];

// Немного замечательного кода и магии
if(((hours<0 || hours>23) || (minutes<0 || minutes>59)) || ((isNaN(hours)) || (isNaN(minutes))))
    console.log('Время указано не верно');
else {

    var decades=['-','X','XX','XXX','XL','L'];
    var ones=[' ','I','II','III','IV','V','VI','VII','VIII','IX'];
    var romeHour=[decades[Math.floor(hours/10)],ones[hours%10],':',decades[Math.floor(minutes/10)],ones[minutes%10]];
    console.log(romeHour[0]+romeHour[1]+romeHour[2]+romeHour[3]+romeHour[4]);
    for (var i=0;i<8;i++) {
        console.log(romeToAscii(romeHour[0])[i]+(romeToAscii(romeHour[1])[i])+(romeToAscii(romeHour[2])[i])+
            (romeToAscii(romeHour[3])[i])+(romeToAscii(romeHour[4])[i]));
    }
}

 function romeToAscii (a) {
     switch(a) {
         case ':': return [
             '     ',
             '     ',
             '     ',
             ' (_) ',
             ' (_) ',
             '     ',
             ' (_) ',
             ' (_) '
         ]; break;
         case ' ': return [' ',' ',' ',' ',' ',' ',' ',' ']; break;
         case '-': return ['     ','     ','     ','-----','     ','     ','     ','     ']; break;
         case 'I': return [
             '_ _ _ ',
             ' (_)  ',
             ' (_)  ',
             ' (_)  ',
             ' (_)  ',
             ' (_)  ',
             ' (_)  ',
             '_(_)_ '
         ]; break;
         case 'II': return [
             '__ _ __ _ __',
             '  (_)  (_)  ',
             '  (_)  (_)  ',
             '  (_)  (_)  ',
             '  (_)  (_)  ',
             '  (_)  (_)  ',
             '  (_)  (_)  ',
             '__(_)__(_)__'
         ]; break;
         case 'III': return [
             '__ _ __ _ __ _ __',
             '  (_)  (_)  (_)  ',
             '  (_)  (_)  (_)  ',
             '  (_)  (_)  (_)  ',
             '  (_)  (_)  (_)  ',
             '  (_)  (_)  (_)  ',
             '  (_)  (_)  (_)  ',
             '__(_)__(_)__(_)__'
         ]; break;
         case 'IV': return [
             '_ _ _  _           _   ',
             ' (_)  (_)         (_)  ',
             ' (_)  (_)         (_)  ',
             ' (_)  (_)_       _(_)  ',
             ' (_)    (_)     (_)    ',
             ' (_)     (_)   (_)     ',
             ' (_)      (_)_(_)      ',
             '_(_)_       (_)        '
         ]; break;
         case 'V': return [
             ' _           _   ',
             '(_)         (_)  ',
             '(_)         (_)  ',
             '(_)_       _(_)  ',
             '  (_)     (_)    ',
             '   (_)   (_)     ',
             '    (_)_(_)      ',
             '      (_)        '
         ]; break;
         case 'VI': return [
             ' _           _  _ _ _ ',
             '(_)         (_)  (_)  ',
             '(_)         (_)  (_)  ',
             '(_)_       _(_)  (_)  ',
             '  (_)     (_)    (_)  ',
             '   (_)   (_)     (_)  ',
             '    (_)_(_)      (_)  ',
             '      (_)       _(_)_ '
         ]; break;
         case 'VII': return [
             ' _           _  _ _ _ _ _ _ ',
             '(_)         (_)  (_)   (_)  ',
             '(_)         (_)  (_)   (_)  ',
             '(_)_       _(_)  (_)   (_)  ',
             '  (_)     (_)    (_)   (_)  ',
             '   (_)   (_)     (_)   (_)  ',
             '    (_)_(_)      (_)   (_)  ',
             '      (_)       _(_)_ _(_)_ '
         ]; break;
         case 'VIII': return [
             ' _           _  _ _ _ _ _ _ ',
             '(_)         (_)  (_)   (_)   (_) ',
             '(_)         (_)  (_)   (_)   (_) ',
             '(_)_       _(_)  (_)   (_)   (_) ',
             '  (_)     (_)    (_)   (_)   (_) ',
             '   (_)   (_)     (_)   (_)   (_) ',
             '    (_)_(_)      (_)   (_)   (_) ',
             '      (_)       _(_)_ _(_)_ _(_)_'
         ]; break;

         case 'IX': return  [
             '_ _ _  _           _ ',
             ' (_)  (_)_       _(_)',
             ' (_)    (_)_   _(_)  ',
             ' (_)      (_)_(_)    ',
             ' (_)       _(_)_     ',
             ' (_)     _(_) (_)_   ',
             ' (_)   _(_)     (_)_ ',
             '_(_)_ (_)         (_)'
         ]; break;
         case 'X': return  [
             ' _           _ ',
             '(_)_       _(_)',
             '  (_)_   _(_)  ',
             '    (_)_(_)    ',
             '     _(_)_     ',
             '   _(_) (_)_   ',
             ' _(_)     (_)_ ',
             '(_)         (_)'
         ]; break;
         case 'XX': return  [
             ' _           _   _           _ ',
             '(_)_       _(_) (_)_       _(_)',
             '  (_)_   _(_)     (_)_   _(_)  ',
             '    (_)_(_)         (_)_(_)    ',
             '     _(_)_           _(_)_     ',
             '   _(_) (_)_       _(_) (_)_   ',
             ' _(_)     (_)_   _(_)     (_)_ ',
             '(_)         (_) (_)         (_)'
         ]; break;
         case 'XXX': return  [
             ' _           _   _           _   _           _ ',
             '(_)_       _(_) (_)_       _(_) (_)_       _(_)',
             '  (_)_   _(_)     (_)_   _(_)     (_)_   _(_)  ',
             '    (_)_(_)         (_)_(_)         (_)_(_)    ',
             '     _(_)_           _(_)_           _(_)_     ',
             '   _(_) (_)_       _(_) (_)_       _(_) (_)_   ',
             ' _(_)     (_)_   _(_)     (_)_   _(_)     (_)_ ',
             '(_)         (_) (_)         (_) (_)         (_)'
         ]; break;
         case 'XL': return  [
             ' _           _    _             ',
             '(_)_       _(_)  (_)            ',
             '  (_)_   _(_)    (_)            ',
             '    (_)_(_)      (_)            ',
             '     _(_)_       (_)            ',
             '   _(_) (_)_     (_)            ',
             ' _(_)     (_)_   (_)            ',
             '(_)         (_)  (_)(_)(_)(_)(_)'
         ]; break;
         case 'L': return  [
             '  _             ',
             ' (_)            ',
             ' (_)            ',
             ' (_)            ',
             ' (_)            ',
             ' (_)            ',
             ' (_)            ',
             ' (_)(_)(_)(_)(_)'
         ]; break;

     }
     }

